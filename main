import cv2
import numpy as np


def cannyDetector(frame):
    # Image en gris
    gray = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)
    # Filtre de Gauss pour réduire la sensibilité du détecteur au bruit
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    # Détecteur Canny pour détecter les changements brusques de couleurs
    canny = cv2.Canny(blur, 50, 150)
    return canny

def segmentation(frame):
    # hauteur y
    height = frame.shape[0]
    # longueur x
    width = frame.shape[1]
    # créer un polygone triangulaire pour le masque
    polygons = np.array([[(0, height), (width/2, height/2), (width, height)]], np.int32)
    # génère une image remplie de 0 des dimensions de l'image
    mask = np.zeros_like(frame)
    # Permet de remplir le masque avec des valeurs de 1 et les autres zones avec des valeurs de 0
    cv2.fillPoly(mask, polygons, 255)
    # garde le zone triangulaire
    segment = cv2.bitwise_and(frame, mask)
    return segment

def calculateLines(frame, lines):
    left = []
    right = []
    for line in lines: #loop pour chaque ligne détecté
        # Passe d'un tableau 2D à 1D
        x1, y1, x2, y2 = line.reshape(4)
        # Adapte un polynôme linéaire aux coordonnées x et y et renvoie un vecteur de coefficients
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        slope = parameters[0]
        y_intercept = parameters[1]
        # si slope<0 la ligne est à gauche de la voie
        if slope < 0:
            left.append((slope, y_intercept))
        # sinon, la ligne est à droite de la voie
        else:
            right.append((slope, y_intercept))
    # Calcule la moyenne de toutes les valeurs pour la gauche et la droite en une seule pente et une valeur d’interception en y pour chaque ligne
    left_avg = np.average(left, axis = 0)
    right_avg = np.average(right, axis = 0)
    # Calcule les coordonnées x1, y1, x2, y2 pour les lignes gauche et droite
    left_line = calculateCoordinates(frame, left_avg)
    right_line = calculateCoordinates(frame, right_avg)
    return np.array([left_line, right_line])

def calculateCoordinates(frame, parameters):
    slope, intercept = parameters
    # Définit les coordonnées y initiales comme hauteur de haut en bas
    y1 = frame.shape[0]
    # Définit les coordonnées Y finales
    y2 = int(y1/1.55)
    # Définit les coordonées x initiales comme (y1-b)/m
    x1 = int((y1 - intercept)/slope)
    # Définit les coordonées x finales comme (y2-b)/m
    x2 = int((y2 - intercept)/slope)
    return np.array([x1, y1, x2, y2])

def visualizeLines(frame, lines):
    # Crée une image rempliz de zéro intensités avec les mêmes dimensions que l'image
    linesVisualize = np.zeros_like(frame)
    # Vérifie si des lignes sont détectées
    for x1, y1, x2, y2 in lines:
    # Dessine des lignes entre deux coordonnées avec une couleur rouge et 5 d'épaisseur
        cv2.line(linesVisualize, (x1, y1), (x2, y2), (0, 0, 255), 5)
        print(x1, x2, y1, y2)
    return linesVisualize

# Lecture de la video
video = cv2.VideoCapture("challenge.mp4")
while (video.isOpened()):
    # ret = valeur boolléenne qui retourne l'obtention de l'image, fram = image en cours dans la vidéo
    ret, frame = video.read()
    blur = cv2.GaussianBlur(frame, (5, 5), 0)
    canny = cannyDetector(frame)
    cv2.imshow("canny", canny)
    segment = segmentation(canny)
    #Calcule la moyenne des multiples lignes détectées de hough en deux lignes pour la voie de droite et de gauche
    hough = cv2.HoughLinesP(segment, 2, np.pi / 180, 100, np.array([]), minLineLength=100, maxLineGap=50)
    lines = calculateLines(frame, hough)
    # Visualise les lignes
    linesVisualize = visualizeLines(frame, lines)
    # Superpose des lignes sur le cadre en prenant leurs sommes pondérées et en ajoutant une valeur scalaire de 1 comme argument gamma
    output = cv2.addWeighted(frame, 0.9, linesVisualize, 1, 1)
    cv2.imshow("output", output)
    # Images toutes les 1 ms
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
video.release()
cv2.destroyAllWindows()
